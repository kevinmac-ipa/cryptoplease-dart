// Autogenerated from Pigeon (v3.2.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.solana.solana_mobile_client;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Api {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class GetCapabilitiesResultDto {
    private @NonNull Boolean supportsCloneAuthorization;
    public @NonNull Boolean getSupportsCloneAuthorization() { return supportsCloneAuthorization; }
    public void setSupportsCloneAuthorization(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"supportsCloneAuthorization\" is null.");
      }
      this.supportsCloneAuthorization = setterArg;
    }

    private @NonNull Boolean supportsSignAndSendTransactions;
    public @NonNull Boolean getSupportsSignAndSendTransactions() { return supportsSignAndSendTransactions; }
    public void setSupportsSignAndSendTransactions(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"supportsSignAndSendTransactions\" is null.");
      }
      this.supportsSignAndSendTransactions = setterArg;
    }

    private @NonNull Long maxTransactionsPerSigningRequest;
    public @NonNull Long getMaxTransactionsPerSigningRequest() { return maxTransactionsPerSigningRequest; }
    public void setMaxTransactionsPerSigningRequest(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maxTransactionsPerSigningRequest\" is null.");
      }
      this.maxTransactionsPerSigningRequest = setterArg;
    }

    private @NonNull Long maxMessagesPerSigningRequest;
    public @NonNull Long getMaxMessagesPerSigningRequest() { return maxMessagesPerSigningRequest; }
    public void setMaxMessagesPerSigningRequest(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maxMessagesPerSigningRequest\" is null.");
      }
      this.maxMessagesPerSigningRequest = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private GetCapabilitiesResultDto() {}
    public static final class Builder {
      private @Nullable Boolean supportsCloneAuthorization;
      public @NonNull Builder setSupportsCloneAuthorization(@NonNull Boolean setterArg) {
        this.supportsCloneAuthorization = setterArg;
        return this;
      }
      private @Nullable Boolean supportsSignAndSendTransactions;
      public @NonNull Builder setSupportsSignAndSendTransactions(@NonNull Boolean setterArg) {
        this.supportsSignAndSendTransactions = setterArg;
        return this;
      }
      private @Nullable Long maxTransactionsPerSigningRequest;
      public @NonNull Builder setMaxTransactionsPerSigningRequest(@NonNull Long setterArg) {
        this.maxTransactionsPerSigningRequest = setterArg;
        return this;
      }
      private @Nullable Long maxMessagesPerSigningRequest;
      public @NonNull Builder setMaxMessagesPerSigningRequest(@NonNull Long setterArg) {
        this.maxMessagesPerSigningRequest = setterArg;
        return this;
      }
      public @NonNull GetCapabilitiesResultDto build() {
        GetCapabilitiesResultDto pigeonReturn = new GetCapabilitiesResultDto();
        pigeonReturn.setSupportsCloneAuthorization(supportsCloneAuthorization);
        pigeonReturn.setSupportsSignAndSendTransactions(supportsSignAndSendTransactions);
        pigeonReturn.setMaxTransactionsPerSigningRequest(maxTransactionsPerSigningRequest);
        pigeonReturn.setMaxMessagesPerSigningRequest(maxMessagesPerSigningRequest);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("supportsCloneAuthorization", supportsCloneAuthorization);
      toMapResult.put("supportsSignAndSendTransactions", supportsSignAndSendTransactions);
      toMapResult.put("maxTransactionsPerSigningRequest", maxTransactionsPerSigningRequest);
      toMapResult.put("maxMessagesPerSigningRequest", maxMessagesPerSigningRequest);
      return toMapResult;
    }
    static @NonNull GetCapabilitiesResultDto fromMap(@NonNull Map<String, Object> map) {
      GetCapabilitiesResultDto pigeonResult = new GetCapabilitiesResultDto();
      Object supportsCloneAuthorization = map.get("supportsCloneAuthorization");
      pigeonResult.setSupportsCloneAuthorization((Boolean)supportsCloneAuthorization);
      Object supportsSignAndSendTransactions = map.get("supportsSignAndSendTransactions");
      pigeonResult.setSupportsSignAndSendTransactions((Boolean)supportsSignAndSendTransactions);
      Object maxTransactionsPerSigningRequest = map.get("maxTransactionsPerSigningRequest");
      pigeonResult.setMaxTransactionsPerSigningRequest((maxTransactionsPerSigningRequest == null) ? null : ((maxTransactionsPerSigningRequest instanceof Integer) ? (Integer)maxTransactionsPerSigningRequest : (Long)maxTransactionsPerSigningRequest));
      Object maxMessagesPerSigningRequest = map.get("maxMessagesPerSigningRequest");
      pigeonResult.setMaxMessagesPerSigningRequest((maxMessagesPerSigningRequest == null) ? null : ((maxMessagesPerSigningRequest instanceof Integer) ? (Integer)maxMessagesPerSigningRequest : (Long)maxMessagesPerSigningRequest));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AuthorizationResultDto {
    private @NonNull String authToken;
    public @NonNull String getAuthToken() { return authToken; }
    public void setAuthToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"authToken\" is null.");
      }
      this.authToken = setterArg;
    }

    private @NonNull byte[] publicKey;
    public @NonNull byte[] getPublicKey() { return publicKey; }
    public void setPublicKey(@NonNull byte[] setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"publicKey\" is null.");
      }
      this.publicKey = setterArg;
    }

    private @Nullable String accountLabel;
    public @Nullable String getAccountLabel() { return accountLabel; }
    public void setAccountLabel(@Nullable String setterArg) {
      this.accountLabel = setterArg;
    }

    private @Nullable String walletUriBase;
    public @Nullable String getWalletUriBase() { return walletUriBase; }
    public void setWalletUriBase(@Nullable String setterArg) {
      this.walletUriBase = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private AuthorizationResultDto() {}
    public static final class Builder {
      private @Nullable String authToken;
      public @NonNull Builder setAuthToken(@NonNull String setterArg) {
        this.authToken = setterArg;
        return this;
      }
      private @Nullable byte[] publicKey;
      public @NonNull Builder setPublicKey(@NonNull byte[] setterArg) {
        this.publicKey = setterArg;
        return this;
      }
      private @Nullable String accountLabel;
      public @NonNull Builder setAccountLabel(@Nullable String setterArg) {
        this.accountLabel = setterArg;
        return this;
      }
      private @Nullable String walletUriBase;
      public @NonNull Builder setWalletUriBase(@Nullable String setterArg) {
        this.walletUriBase = setterArg;
        return this;
      }
      public @NonNull AuthorizationResultDto build() {
        AuthorizationResultDto pigeonReturn = new AuthorizationResultDto();
        pigeonReturn.setAuthToken(authToken);
        pigeonReturn.setPublicKey(publicKey);
        pigeonReturn.setAccountLabel(accountLabel);
        pigeonReturn.setWalletUriBase(walletUriBase);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("authToken", authToken);
      toMapResult.put("publicKey", publicKey);
      toMapResult.put("accountLabel", accountLabel);
      toMapResult.put("walletUriBase", walletUriBase);
      return toMapResult;
    }
    static @NonNull AuthorizationResultDto fromMap(@NonNull Map<String, Object> map) {
      AuthorizationResultDto pigeonResult = new AuthorizationResultDto();
      Object authToken = map.get("authToken");
      pigeonResult.setAuthToken((String)authToken);
      Object publicKey = map.get("publicKey");
      pigeonResult.setPublicKey((byte[])publicKey);
      Object accountLabel = map.get("accountLabel");
      pigeonResult.setAccountLabel((String)accountLabel);
      Object walletUriBase = map.get("walletUriBase");
      pigeonResult.setWalletUriBase((String)walletUriBase);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SignPayloadsResultDto {
    private @NonNull List<byte[]> signedPayloads;
    public @NonNull List<byte[]> getSignedPayloads() { return signedPayloads; }
    public void setSignedPayloads(@NonNull List<byte[]> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"signedPayloads\" is null.");
      }
      this.signedPayloads = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SignPayloadsResultDto() {}
    public static final class Builder {
      private @Nullable List<byte[]> signedPayloads;
      public @NonNull Builder setSignedPayloads(@NonNull List<byte[]> setterArg) {
        this.signedPayloads = setterArg;
        return this;
      }
      public @NonNull SignPayloadsResultDto build() {
        SignPayloadsResultDto pigeonReturn = new SignPayloadsResultDto();
        pigeonReturn.setSignedPayloads(signedPayloads);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("signedPayloads", signedPayloads);
      return toMapResult;
    }
    static @NonNull SignPayloadsResultDto fromMap(@NonNull Map<String, Object> map) {
      SignPayloadsResultDto pigeonResult = new SignPayloadsResultDto();
      Object signedPayloads = map.get("signedPayloads");
      pigeonResult.setSignedPayloads((List<byte[]>)signedPayloads);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SignAndSendTransactionsResultDto {
    private @NonNull List<byte[]> signatures;
    public @NonNull List<byte[]> getSignatures() { return signatures; }
    public void setSignatures(@NonNull List<byte[]> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"signatures\" is null.");
      }
      this.signatures = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SignAndSendTransactionsResultDto() {}
    public static final class Builder {
      private @Nullable List<byte[]> signatures;
      public @NonNull Builder setSignatures(@NonNull List<byte[]> setterArg) {
        this.signatures = setterArg;
        return this;
      }
      public @NonNull SignAndSendTransactionsResultDto build() {
        SignAndSendTransactionsResultDto pigeonReturn = new SignAndSendTransactionsResultDto();
        pigeonReturn.setSignatures(signatures);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("signatures", signatures);
      return toMapResult;
    }
    static @NonNull SignAndSendTransactionsResultDto fromMap(@NonNull Map<String, Object> map) {
      SignAndSendTransactionsResultDto pigeonResult = new SignAndSendTransactionsResultDto();
      Object signatures = map.get("signatures");
      pigeonResult.setSignatures((List<byte[]>)signatures);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class ApiLocalAssociationScenarioCodec extends StandardMessageCodec {
    public static final ApiLocalAssociationScenarioCodec INSTANCE = new ApiLocalAssociationScenarioCodec();
    private ApiLocalAssociationScenarioCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AuthorizationResultDto.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return GetCapabilitiesResultDto.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return SignAndSendTransactionsResultDto.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return SignPayloadsResultDto.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AuthorizationResultDto) {
        stream.write(128);
        writeValue(stream, ((AuthorizationResultDto) value).toMap());
      } else 
      if (value instanceof GetCapabilitiesResultDto) {
        stream.write(129);
        writeValue(stream, ((GetCapabilitiesResultDto) value).toMap());
      } else 
      if (value instanceof SignAndSendTransactionsResultDto) {
        stream.write(130);
        writeValue(stream, ((SignAndSendTransactionsResultDto) value).toMap());
      } else 
      if (value instanceof SignPayloadsResultDto) {
        stream.write(131);
        writeValue(stream, ((SignPayloadsResultDto) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ApiLocalAssociationScenario {
    void create(@NonNull Long id, Result<Void> result);
    void start(@NonNull Long id, Result<Void> result);
    void close(@NonNull Long id, Result<Void> result);
    void startActivityForResult(@NonNull Long id, @Nullable String uriPrefix, Result<Void> result);
    void getCapabilities(@NonNull Long id, Result<GetCapabilitiesResultDto> result);
    void authorize(@NonNull Long id, @Nullable String identityUri, @Nullable String iconUri, @Nullable String identityName, @Nullable String cluster, Result<AuthorizationResultDto> result);
    void reauthorize(@NonNull Long id, @Nullable String identityUri, @Nullable String iconUri, @Nullable String identityName, @NonNull String authToken, Result<AuthorizationResultDto> result);
    void deauthorize(@NonNull Long id, @NonNull String authToken, Result<Void> result);
    void signTransactions(@NonNull Long id, @NonNull List<byte[]> transactions, Result<SignPayloadsResultDto> result);
    void signMessages(@NonNull Long id, @NonNull List<byte[]> messages, @NonNull List<byte[]> addresses, Result<SignPayloadsResultDto> result);
    void signAndSendTransactions(@NonNull Long id, @NonNull List<byte[]> transactions, @Nullable Long minContextSlot, Result<SignAndSendTransactionsResultDto> result);

    /** The codec used by ApiLocalAssociationScenario. */
    static MessageCodec<Object> getCodec() {
      return ApiLocalAssociationScenarioCodec.INSTANCE;
    }

    /** Sets up an instance of `ApiLocalAssociationScenario` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ApiLocalAssociationScenario api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.create", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number idArg = (Number)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.create((idArg == null) ? null : idArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.start", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number idArg = (Number)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.start((idArg == null) ? null : idArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.close", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number idArg = (Number)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.close((idArg == null) ? null : idArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.startActivityForResult", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number idArg = (Number)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              String uriPrefixArg = (String)args.get(1);
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.startActivityForResult((idArg == null) ? null : idArg.longValue(), uriPrefixArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.getCapabilities", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number idArg = (Number)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              Result<GetCapabilitiesResultDto> resultCallback = new Result<GetCapabilitiesResultDto>() {
                public void success(GetCapabilitiesResultDto result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getCapabilities((idArg == null) ? null : idArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.authorize", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number idArg = (Number)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              String identityUriArg = (String)args.get(1);
              String iconUriArg = (String)args.get(2);
              String identityNameArg = (String)args.get(3);
              String clusterArg = (String)args.get(4);
              Result<AuthorizationResultDto> resultCallback = new Result<AuthorizationResultDto>() {
                public void success(AuthorizationResultDto result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.authorize((idArg == null) ? null : idArg.longValue(), identityUriArg, iconUriArg, identityNameArg, clusterArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.reauthorize", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number idArg = (Number)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              String identityUriArg = (String)args.get(1);
              String iconUriArg = (String)args.get(2);
              String identityNameArg = (String)args.get(3);
              String authTokenArg = (String)args.get(4);
              if (authTokenArg == null) {
                throw new NullPointerException("authTokenArg unexpectedly null.");
              }
              Result<AuthorizationResultDto> resultCallback = new Result<AuthorizationResultDto>() {
                public void success(AuthorizationResultDto result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.reauthorize((idArg == null) ? null : idArg.longValue(), identityUriArg, iconUriArg, identityNameArg, authTokenArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.deauthorize", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number idArg = (Number)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              String authTokenArg = (String)args.get(1);
              if (authTokenArg == null) {
                throw new NullPointerException("authTokenArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.deauthorize((idArg == null) ? null : idArg.longValue(), authTokenArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.signTransactions", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number idArg = (Number)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              List<byte[]> transactionsArg = (List<byte[]>)args.get(1);
              if (transactionsArg == null) {
                throw new NullPointerException("transactionsArg unexpectedly null.");
              }
              Result<SignPayloadsResultDto> resultCallback = new Result<SignPayloadsResultDto>() {
                public void success(SignPayloadsResultDto result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.signTransactions((idArg == null) ? null : idArg.longValue(), transactionsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.signMessages", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number idArg = (Number)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              List<byte[]> messagesArg = (List<byte[]>)args.get(1);
              if (messagesArg == null) {
                throw new NullPointerException("messagesArg unexpectedly null.");
              }
              List<byte[]> addressesArg = (List<byte[]>)args.get(2);
              if (addressesArg == null) {
                throw new NullPointerException("addressesArg unexpectedly null.");
              }
              Result<SignPayloadsResultDto> resultCallback = new Result<SignPayloadsResultDto>() {
                public void success(SignPayloadsResultDto result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.signMessages((idArg == null) ? null : idArg.longValue(), messagesArg, addressesArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiLocalAssociationScenario.signAndSendTransactions", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number idArg = (Number)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              List<byte[]> transactionsArg = (List<byte[]>)args.get(1);
              if (transactionsArg == null) {
                throw new NullPointerException("transactionsArg unexpectedly null.");
              }
              Number minContextSlotArg = (Number)args.get(2);
              Result<SignAndSendTransactionsResultDto> resultCallback = new Result<SignAndSendTransactionsResultDto>() {
                public void success(SignAndSendTransactionsResultDto result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.signAndSendTransactions((idArg == null) ? null : idArg.longValue(), transactionsArg, (minContextSlotArg == null) ? null : minContextSlotArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
