// Autogenerated from Pigeon (v3.2.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class GetCapabilitiesResultDto {
  GetCapabilitiesResultDto({
    required this.supportsCloneAuthorization,
    required this.supportsSignAndSendTransactions,
    required this.maxTransactionsPerSigningRequest,
    required this.maxMessagesPerSigningRequest,
  });

  bool supportsCloneAuthorization;
  bool supportsSignAndSendTransactions;
  int maxTransactionsPerSigningRequest;
  int maxMessagesPerSigningRequest;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['supportsCloneAuthorization'] = supportsCloneAuthorization;
    pigeonMap['supportsSignAndSendTransactions'] =
        supportsSignAndSendTransactions;
    pigeonMap['maxTransactionsPerSigningRequest'] =
        maxTransactionsPerSigningRequest;
    pigeonMap['maxMessagesPerSigningRequest'] = maxMessagesPerSigningRequest;
    return pigeonMap;
  }

  static GetCapabilitiesResultDto decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return GetCapabilitiesResultDto(
      supportsCloneAuthorization:
          pigeonMap['supportsCloneAuthorization']! as bool,
      supportsSignAndSendTransactions:
          pigeonMap['supportsSignAndSendTransactions']! as bool,
      maxTransactionsPerSigningRequest:
          pigeonMap['maxTransactionsPerSigningRequest']! as int,
      maxMessagesPerSigningRequest:
          pigeonMap['maxMessagesPerSigningRequest']! as int,
    );
  }
}

class AuthorizationResultDto {
  AuthorizationResultDto({
    required this.authToken,
    required this.publicKey,
    this.accountLabel,
    this.walletUriBase,
  });

  String authToken;
  Uint8List publicKey;
  String? accountLabel;
  String? walletUriBase;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['authToken'] = authToken;
    pigeonMap['publicKey'] = publicKey;
    pigeonMap['accountLabel'] = accountLabel;
    pigeonMap['walletUriBase'] = walletUriBase;
    return pigeonMap;
  }

  static AuthorizationResultDto decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return AuthorizationResultDto(
      authToken: pigeonMap['authToken']! as String,
      publicKey: pigeonMap['publicKey']! as Uint8List,
      accountLabel: pigeonMap['accountLabel'] as String?,
      walletUriBase: pigeonMap['walletUriBase'] as String?,
    );
  }
}

class SignPayloadsResultDto {
  SignPayloadsResultDto({
    required this.signedPayloads,
  });

  List<Uint8List?> signedPayloads;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['signedPayloads'] = signedPayloads;
    return pigeonMap;
  }

  static SignPayloadsResultDto decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return SignPayloadsResultDto(
      signedPayloads:
          (pigeonMap['signedPayloads'] as List<Object?>?)!.cast<Uint8List?>(),
    );
  }
}

class SignAndSendTransactionsResultDto {
  SignAndSendTransactionsResultDto({
    required this.signatures,
  });

  List<Uint8List?> signatures;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['signatures'] = signatures;
    return pigeonMap;
  }

  static SignAndSendTransactionsResultDto decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return SignAndSendTransactionsResultDto(
      signatures:
          (pigeonMap['signatures'] as List<Object?>?)!.cast<Uint8List?>(),
    );
  }
}

class _ApiLocalAssociationScenarioCodec extends StandardMessageCodec {
  const _ApiLocalAssociationScenarioCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AuthorizationResultDto) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is GetCapabilitiesResultDto) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is SignAndSendTransactionsResultDto) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is SignPayloadsResultDto) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return AuthorizationResultDto.decode(readValue(buffer)!);

      case 129:
        return GetCapabilitiesResultDto.decode(readValue(buffer)!);

      case 130:
        return SignAndSendTransactionsResultDto.decode(readValue(buffer)!);

      case 131:
        return SignPayloadsResultDto.decode(readValue(buffer)!);

      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class ApiLocalAssociationScenario {
  /// Constructor for [ApiLocalAssociationScenario].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ApiLocalAssociationScenario({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec =
      _ApiLocalAssociationScenarioCodec();

  Future<void> create(int arg_id) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ApiLocalAssociationScenario.create', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_id]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> start(int arg_id) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ApiLocalAssociationScenario.start', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_id]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> close(int arg_id) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ApiLocalAssociationScenario.close', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_id]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> startActivityForResult(int arg_id, String? arg_uriPrefix) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ApiLocalAssociationScenario.startActivityForResult',
        codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel
        .send(<Object?>[arg_id, arg_uriPrefix]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<GetCapabilitiesResultDto> getCapabilities(int arg_id) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ApiLocalAssociationScenario.getCapabilities', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_id]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as GetCapabilitiesResultDto?)!;
    }
  }

  Future<AuthorizationResultDto> authorize(
      int arg_id,
      String? arg_identityUri,
      String? arg_iconUri,
      String? arg_identityName,
      String? arg_cluster) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ApiLocalAssociationScenario.authorize', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel.send(<Object?>[
      arg_id,
      arg_identityUri,
      arg_iconUri,
      arg_identityName,
      arg_cluster
    ]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as AuthorizationResultDto?)!;
    }
  }

  Future<AuthorizationResultDto> reauthorize(
      int arg_id,
      String? arg_identityUri,
      String? arg_iconUri,
      String? arg_identityName,
      String arg_authToken) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ApiLocalAssociationScenario.reauthorize', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel.send(<Object?>[
      arg_id,
      arg_identityUri,
      arg_iconUri,
      arg_identityName,
      arg_authToken
    ]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as AuthorizationResultDto?)!;
    }
  }

  Future<void> deauthorize(int arg_id, String arg_authToken) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ApiLocalAssociationScenario.deauthorize', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel
        .send(<Object?>[arg_id, arg_authToken]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<SignPayloadsResultDto> signTransactions(
      int arg_id, List<Uint8List?> arg_transactions) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ApiLocalAssociationScenario.signTransactions',
        codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel
        .send(<Object?>[arg_id, arg_transactions]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as SignPayloadsResultDto?)!;
    }
  }

  Future<SignPayloadsResultDto> signMessages(int arg_id,
      List<Uint8List?> arg_messages, List<Uint8List?> arg_addresses) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ApiLocalAssociationScenario.signMessages', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_id, arg_messages, arg_addresses])
            as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as SignPayloadsResultDto?)!;
    }
  }

  Future<SignAndSendTransactionsResultDto> signAndSendTransactions(int arg_id,
      List<Uint8List?> arg_transactions, int? arg_minContextSlot) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ApiLocalAssociationScenario.signAndSendTransactions',
        codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel
            .send(<Object?>[arg_id, arg_transactions, arg_minContextSlot])
        as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as SignAndSendTransactionsResultDto?)!;
    }
  }
}
