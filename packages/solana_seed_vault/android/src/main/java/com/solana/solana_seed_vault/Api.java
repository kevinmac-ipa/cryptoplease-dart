// Autogenerated from Pigeon (v3.2.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.solana.solana_seed_vault;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Api {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SigningRequestDto {
    private @NonNull byte[] payload;
    public @NonNull byte[] getPayload() { return payload; }
    public void setPayload(@NonNull byte[] setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"payload\" is null.");
      }
      this.payload = setterArg;
    }

    private @NonNull List<String> requestedSignatures;
    public @NonNull List<String> getRequestedSignatures() { return requestedSignatures; }
    public void setRequestedSignatures(@NonNull List<String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"requestedSignatures\" is null.");
      }
      this.requestedSignatures = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SigningRequestDto() {}
    public static final class Builder {
      private @Nullable byte[] payload;
      public @NonNull Builder setPayload(@NonNull byte[] setterArg) {
        this.payload = setterArg;
        return this;
      }
      private @Nullable List<String> requestedSignatures;
      public @NonNull Builder setRequestedSignatures(@NonNull List<String> setterArg) {
        this.requestedSignatures = setterArg;
        return this;
      }
      public @NonNull SigningRequestDto build() {
        SigningRequestDto pigeonReturn = new SigningRequestDto();
        pigeonReturn.setPayload(payload);
        pigeonReturn.setRequestedSignatures(requestedSignatures);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("payload", payload);
      toMapResult.put("requestedSignatures", requestedSignatures);
      return toMapResult;
    }
    static @NonNull SigningRequestDto fromMap(@NonNull Map<String, Object> map) {
      SigningRequestDto pigeonResult = new SigningRequestDto();
      Object payload = map.get("payload");
      pigeonResult.setPayload((byte[])payload);
      Object requestedSignatures = map.get("requestedSignatures");
      pigeonResult.setRequestedSignatures((List<String>)requestedSignatures);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SigningResponseDto {
    private @NonNull List<byte[]> signatures;
    public @NonNull List<byte[]> getSignatures() { return signatures; }
    public void setSignatures(@NonNull List<byte[]> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"signatures\" is null.");
      }
      this.signatures = setterArg;
    }

    private @NonNull List<String> resolvedDerivationPaths;
    public @NonNull List<String> getResolvedDerivationPaths() { return resolvedDerivationPaths; }
    public void setResolvedDerivationPaths(@NonNull List<String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"resolvedDerivationPaths\" is null.");
      }
      this.resolvedDerivationPaths = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SigningResponseDto() {}
    public static final class Builder {
      private @Nullable List<byte[]> signatures;
      public @NonNull Builder setSignatures(@NonNull List<byte[]> setterArg) {
        this.signatures = setterArg;
        return this;
      }
      private @Nullable List<String> resolvedDerivationPaths;
      public @NonNull Builder setResolvedDerivationPaths(@NonNull List<String> setterArg) {
        this.resolvedDerivationPaths = setterArg;
        return this;
      }
      public @NonNull SigningResponseDto build() {
        SigningResponseDto pigeonReturn = new SigningResponseDto();
        pigeonReturn.setSignatures(signatures);
        pigeonReturn.setResolvedDerivationPaths(resolvedDerivationPaths);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("signatures", signatures);
      toMapResult.put("resolvedDerivationPaths", resolvedDerivationPaths);
      return toMapResult;
    }
    static @NonNull SigningResponseDto fromMap(@NonNull Map<String, Object> map) {
      SigningResponseDto pigeonResult = new SigningResponseDto();
      Object signatures = map.get("signatures");
      pigeonResult.setSignatures((List<byte[]>)signatures);
      Object resolvedDerivationPaths = map.get("resolvedDerivationPaths");
      pigeonResult.setResolvedDerivationPaths((List<String>)resolvedDerivationPaths);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PublicKeyResponseDto {
    private @Nullable byte[] publicKey;
    public @Nullable byte[] getPublicKey() { return publicKey; }
    public void setPublicKey(@Nullable byte[] setterArg) {
      this.publicKey = setterArg;
    }

    private @Nullable String publicKeyEncoded;
    public @Nullable String getPublicKeyEncoded() { return publicKeyEncoded; }
    public void setPublicKeyEncoded(@Nullable String setterArg) {
      this.publicKeyEncoded = setterArg;
    }

    private @NonNull String resolvedDerivationPath;
    public @NonNull String getResolvedDerivationPath() { return resolvedDerivationPath; }
    public void setResolvedDerivationPath(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"resolvedDerivationPath\" is null.");
      }
      this.resolvedDerivationPath = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PublicKeyResponseDto() {}
    public static final class Builder {
      private @Nullable byte[] publicKey;
      public @NonNull Builder setPublicKey(@Nullable byte[] setterArg) {
        this.publicKey = setterArg;
        return this;
      }
      private @Nullable String publicKeyEncoded;
      public @NonNull Builder setPublicKeyEncoded(@Nullable String setterArg) {
        this.publicKeyEncoded = setterArg;
        return this;
      }
      private @Nullable String resolvedDerivationPath;
      public @NonNull Builder setResolvedDerivationPath(@NonNull String setterArg) {
        this.resolvedDerivationPath = setterArg;
        return this;
      }
      public @NonNull PublicKeyResponseDto build() {
        PublicKeyResponseDto pigeonReturn = new PublicKeyResponseDto();
        pigeonReturn.setPublicKey(publicKey);
        pigeonReturn.setPublicKeyEncoded(publicKeyEncoded);
        pigeonReturn.setResolvedDerivationPath(resolvedDerivationPath);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("publicKey", publicKey);
      toMapResult.put("publicKeyEncoded", publicKeyEncoded);
      toMapResult.put("resolvedDerivationPath", resolvedDerivationPath);
      return toMapResult;
    }
    static @NonNull PublicKeyResponseDto fromMap(@NonNull Map<String, Object> map) {
      PublicKeyResponseDto pigeonResult = new PublicKeyResponseDto();
      Object publicKey = map.get("publicKey");
      pigeonResult.setPublicKey((byte[])publicKey);
      Object publicKeyEncoded = map.get("publicKeyEncoded");
      pigeonResult.setPublicKeyEncoded((String)publicKeyEncoded);
      Object resolvedDerivationPath = map.get("resolvedDerivationPath");
      pigeonResult.setResolvedDerivationPath((String)resolvedDerivationPath);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class WalletApiHostCodec extends StandardMessageCodec {
    public static final WalletApiHostCodec INSTANCE = new WalletApiHostCodec();
    private WalletApiHostCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return PublicKeyResponseDto.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return SigningRequestDto.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return SigningResponseDto.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof PublicKeyResponseDto) {
        stream.write(128);
        writeValue(stream, ((PublicKeyResponseDto) value).toMap());
      } else 
      if (value instanceof SigningRequestDto) {
        stream.write(129);
        writeValue(stream, ((SigningRequestDto) value).toMap());
      } else 
      if (value instanceof SigningResponseDto) {
        stream.write(130);
        writeValue(stream, ((SigningResponseDto) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface WalletApiHost {
    void authorizeSeed(@NonNull Long purpose, Result<Long> result);
    void createSeed(@NonNull Long purpose, Result<Long> result);
    void importSeed(@NonNull Long purpose, Result<Long> result);
    void signMessages(@NonNull Long authToken, @NonNull List<SigningRequestDto> signingRequests, Result<List<SigningResponseDto>> result);
    void signTransactions(@NonNull Long authToken, @NonNull List<SigningRequestDto> signingRequests, Result<List<SigningResponseDto>> result);
    void requestPublicKeys(@NonNull Long authToken, @NonNull List<String> derivationPaths, Result<List<PublicKeyResponseDto>> result);
    @NonNull List<Map<Object, Object>> getAuthorizedSeeds(@NonNull List<String> projection, @Nullable String filterOnColumn, @Nullable Object value);
    @NonNull Map<Object, Object> getAuthorizedSeed(@NonNull Long authToken, @NonNull List<String> projection);
    void deauthorizeSeed(@NonNull Long authToken);
    @NonNull List<Map<Object, Object>> getUnauthorizedSeeds(@NonNull List<String> projection, @Nullable String filterOnColumn, @Nullable Object value);
    @NonNull Boolean hasUnauthorizedSeedsForPurpose(@NonNull Long purpose);
    @NonNull List<Map<Object, Object>> getAccounts(@NonNull Long authToken, @NonNull List<String> projection, @Nullable String filterOnColumn, @Nullable Object value);
    @NonNull Map<Object, Object> getAccount(@NonNull Long authToken, @NonNull Long id, @NonNull List<String> projection);
    void updateAccountName(@NonNull Long authToken, @NonNull Long accountId, @Nullable String name);
    void updateAccountIsUserWallet(@NonNull Long authToken, @NonNull Long accountId, @NonNull Boolean isUserWallet);
    void updateAccountIsValid(@NonNull Long authToken, @NonNull Long accountId, @NonNull Boolean isValid);
    @NonNull List<Map<Object, Object>> getImplementationLimits(@NonNull List<String> projection, @Nullable String filterOnColumn, @Nullable Object value);
    @NonNull Map<Object, Object> getImplementationLimitsForPurpose(@NonNull Long purpose);
    @NonNull String resolveDerivationPath(@NonNull String derivationPath, @NonNull Long purpose);
    @NonNull Boolean isAvailable(@NonNull Boolean allowSimulated);
    void checkPermission(Result<Boolean> result);

    /** The codec used by WalletApiHost. */
    static MessageCodec<Object> getCodec() {
      return WalletApiHostCodec.INSTANCE;
    }

    /** Sets up an instance of `WalletApiHost` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, WalletApiHost api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.authorizeSeed", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number purposeArg = (Number)args.get(0);
              if (purposeArg == null) {
                throw new NullPointerException("purposeArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.authorizeSeed((purposeArg == null) ? null : purposeArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.createSeed", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number purposeArg = (Number)args.get(0);
              if (purposeArg == null) {
                throw new NullPointerException("purposeArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.createSeed((purposeArg == null) ? null : purposeArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.importSeed", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number purposeArg = (Number)args.get(0);
              if (purposeArg == null) {
                throw new NullPointerException("purposeArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.importSeed((purposeArg == null) ? null : purposeArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.signMessages", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number authTokenArg = (Number)args.get(0);
              if (authTokenArg == null) {
                throw new NullPointerException("authTokenArg unexpectedly null.");
              }
              List<SigningRequestDto> signingRequestsArg = (List<SigningRequestDto>)args.get(1);
              if (signingRequestsArg == null) {
                throw new NullPointerException("signingRequestsArg unexpectedly null.");
              }
              Result<List<SigningResponseDto>> resultCallback = new Result<List<SigningResponseDto>>() {
                public void success(List<SigningResponseDto> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.signMessages((authTokenArg == null) ? null : authTokenArg.longValue(), signingRequestsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.signTransactions", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number authTokenArg = (Number)args.get(0);
              if (authTokenArg == null) {
                throw new NullPointerException("authTokenArg unexpectedly null.");
              }
              List<SigningRequestDto> signingRequestsArg = (List<SigningRequestDto>)args.get(1);
              if (signingRequestsArg == null) {
                throw new NullPointerException("signingRequestsArg unexpectedly null.");
              }
              Result<List<SigningResponseDto>> resultCallback = new Result<List<SigningResponseDto>>() {
                public void success(List<SigningResponseDto> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.signTransactions((authTokenArg == null) ? null : authTokenArg.longValue(), signingRequestsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.requestPublicKeys", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number authTokenArg = (Number)args.get(0);
              if (authTokenArg == null) {
                throw new NullPointerException("authTokenArg unexpectedly null.");
              }
              List<String> derivationPathsArg = (List<String>)args.get(1);
              if (derivationPathsArg == null) {
                throw new NullPointerException("derivationPathsArg unexpectedly null.");
              }
              Result<List<PublicKeyResponseDto>> resultCallback = new Result<List<PublicKeyResponseDto>>() {
                public void success(List<PublicKeyResponseDto> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.requestPublicKeys((authTokenArg == null) ? null : authTokenArg.longValue(), derivationPathsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.getAuthorizedSeeds", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              List<String> projectionArg = (List<String>)args.get(0);
              if (projectionArg == null) {
                throw new NullPointerException("projectionArg unexpectedly null.");
              }
              String filterOnColumnArg = (String)args.get(1);
              Object valueArg = (Object)args.get(2);
              List<Map<Object, Object>> output = api.getAuthorizedSeeds(projectionArg, filterOnColumnArg, valueArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.getAuthorizedSeed", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number authTokenArg = (Number)args.get(0);
              if (authTokenArg == null) {
                throw new NullPointerException("authTokenArg unexpectedly null.");
              }
              List<String> projectionArg = (List<String>)args.get(1);
              if (projectionArg == null) {
                throw new NullPointerException("projectionArg unexpectedly null.");
              }
              Map<Object, Object> output = api.getAuthorizedSeed((authTokenArg == null) ? null : authTokenArg.longValue(), projectionArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.deauthorizeSeed", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number authTokenArg = (Number)args.get(0);
              if (authTokenArg == null) {
                throw new NullPointerException("authTokenArg unexpectedly null.");
              }
              api.deauthorizeSeed((authTokenArg == null) ? null : authTokenArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.getUnauthorizedSeeds", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              List<String> projectionArg = (List<String>)args.get(0);
              if (projectionArg == null) {
                throw new NullPointerException("projectionArg unexpectedly null.");
              }
              String filterOnColumnArg = (String)args.get(1);
              Object valueArg = (Object)args.get(2);
              List<Map<Object, Object>> output = api.getUnauthorizedSeeds(projectionArg, filterOnColumnArg, valueArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.hasUnauthorizedSeedsForPurpose", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number purposeArg = (Number)args.get(0);
              if (purposeArg == null) {
                throw new NullPointerException("purposeArg unexpectedly null.");
              }
              Boolean output = api.hasUnauthorizedSeedsForPurpose((purposeArg == null) ? null : purposeArg.longValue());
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.getAccounts", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number authTokenArg = (Number)args.get(0);
              if (authTokenArg == null) {
                throw new NullPointerException("authTokenArg unexpectedly null.");
              }
              List<String> projectionArg = (List<String>)args.get(1);
              if (projectionArg == null) {
                throw new NullPointerException("projectionArg unexpectedly null.");
              }
              String filterOnColumnArg = (String)args.get(2);
              Object valueArg = (Object)args.get(3);
              List<Map<Object, Object>> output = api.getAccounts((authTokenArg == null) ? null : authTokenArg.longValue(), projectionArg, filterOnColumnArg, valueArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.getAccount", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number authTokenArg = (Number)args.get(0);
              if (authTokenArg == null) {
                throw new NullPointerException("authTokenArg unexpectedly null.");
              }
              Number idArg = (Number)args.get(1);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              List<String> projectionArg = (List<String>)args.get(2);
              if (projectionArg == null) {
                throw new NullPointerException("projectionArg unexpectedly null.");
              }
              Map<Object, Object> output = api.getAccount((authTokenArg == null) ? null : authTokenArg.longValue(), (idArg == null) ? null : idArg.longValue(), projectionArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.updateAccountName", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number authTokenArg = (Number)args.get(0);
              if (authTokenArg == null) {
                throw new NullPointerException("authTokenArg unexpectedly null.");
              }
              Number accountIdArg = (Number)args.get(1);
              if (accountIdArg == null) {
                throw new NullPointerException("accountIdArg unexpectedly null.");
              }
              String nameArg = (String)args.get(2);
              api.updateAccountName((authTokenArg == null) ? null : authTokenArg.longValue(), (accountIdArg == null) ? null : accountIdArg.longValue(), nameArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.updateAccountIsUserWallet", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number authTokenArg = (Number)args.get(0);
              if (authTokenArg == null) {
                throw new NullPointerException("authTokenArg unexpectedly null.");
              }
              Number accountIdArg = (Number)args.get(1);
              if (accountIdArg == null) {
                throw new NullPointerException("accountIdArg unexpectedly null.");
              }
              Boolean isUserWalletArg = (Boolean)args.get(2);
              if (isUserWalletArg == null) {
                throw new NullPointerException("isUserWalletArg unexpectedly null.");
              }
              api.updateAccountIsUserWallet((authTokenArg == null) ? null : authTokenArg.longValue(), (accountIdArg == null) ? null : accountIdArg.longValue(), isUserWalletArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.updateAccountIsValid", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number authTokenArg = (Number)args.get(0);
              if (authTokenArg == null) {
                throw new NullPointerException("authTokenArg unexpectedly null.");
              }
              Number accountIdArg = (Number)args.get(1);
              if (accountIdArg == null) {
                throw new NullPointerException("accountIdArg unexpectedly null.");
              }
              Boolean isValidArg = (Boolean)args.get(2);
              if (isValidArg == null) {
                throw new NullPointerException("isValidArg unexpectedly null.");
              }
              api.updateAccountIsValid((authTokenArg == null) ? null : authTokenArg.longValue(), (accountIdArg == null) ? null : accountIdArg.longValue(), isValidArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.getImplementationLimits", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              List<String> projectionArg = (List<String>)args.get(0);
              if (projectionArg == null) {
                throw new NullPointerException("projectionArg unexpectedly null.");
              }
              String filterOnColumnArg = (String)args.get(1);
              Object valueArg = (Object)args.get(2);
              List<Map<Object, Object>> output = api.getImplementationLimits(projectionArg, filterOnColumnArg, valueArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.getImplementationLimitsForPurpose", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number purposeArg = (Number)args.get(0);
              if (purposeArg == null) {
                throw new NullPointerException("purposeArg unexpectedly null.");
              }
              Map<Object, Object> output = api.getImplementationLimitsForPurpose((purposeArg == null) ? null : purposeArg.longValue());
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.resolveDerivationPath", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String derivationPathArg = (String)args.get(0);
              if (derivationPathArg == null) {
                throw new NullPointerException("derivationPathArg unexpectedly null.");
              }
              Number purposeArg = (Number)args.get(1);
              if (purposeArg == null) {
                throw new NullPointerException("purposeArg unexpectedly null.");
              }
              String output = api.resolveDerivationPath(derivationPathArg, (purposeArg == null) ? null : purposeArg.longValue());
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.isAvailable", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Boolean allowSimulatedArg = (Boolean)args.get(0);
              if (allowSimulatedArg == null) {
                throw new NullPointerException("allowSimulatedArg unexpectedly null.");
              }
              Boolean output = api.isAvailable(allowSimulatedArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WalletApiHost.checkPermission", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.checkPermission(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class SeedVaultFlutterApiCodec extends StandardMessageCodec {
    public static final SeedVaultFlutterApiCodec INSTANCE = new SeedVaultFlutterApiCodec();
    private SeedVaultFlutterApiCodec() {}
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class SeedVaultFlutterApi {
    private final BinaryMessenger binaryMessenger;
    public SeedVaultFlutterApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return SeedVaultFlutterApiCodec.INSTANCE;
    }

    public void onChangeNotified(@NonNull List<String> urisArg, @NonNull Long flagsArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.SeedVaultFlutterApi.onChangeNotified", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(urisArg, flagsArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
