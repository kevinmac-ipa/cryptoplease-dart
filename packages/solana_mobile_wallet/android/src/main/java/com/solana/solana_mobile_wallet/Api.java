// Autogenerated from Pigeon (v3.2.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.solana.solana_mobile_wallet;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Api {

  public enum MobileWalletAdapterServerException {
    requestDeclined(0),
    invalidPayloads(1),
    tooManyPayloads(2),
    authorizationNotValid(3),
    notSubmitted(4);

    private int index;
    private MobileWalletAdapterServerException(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AuthorizeRequestDto {
    private @Nullable String identityName;
    public @Nullable String getIdentityName() { return identityName; }
    public void setIdentityName(@Nullable String setterArg) {
      this.identityName = setterArg;
    }

    private @Nullable String identityUri;
    public @Nullable String getIdentityUri() { return identityUri; }
    public void setIdentityUri(@Nullable String setterArg) {
      this.identityUri = setterArg;
    }

    private @Nullable String iconUri;
    public @Nullable String getIconUri() { return iconUri; }
    public void setIconUri(@Nullable String setterArg) {
      this.iconUri = setterArg;
    }

    public static final class Builder {
      private @Nullable String identityName;
      public @NonNull Builder setIdentityName(@Nullable String setterArg) {
        this.identityName = setterArg;
        return this;
      }
      private @Nullable String identityUri;
      public @NonNull Builder setIdentityUri(@Nullable String setterArg) {
        this.identityUri = setterArg;
        return this;
      }
      private @Nullable String iconUri;
      public @NonNull Builder setIconUri(@Nullable String setterArg) {
        this.iconUri = setterArg;
        return this;
      }
      public @NonNull AuthorizeRequestDto build() {
        AuthorizeRequestDto pigeonReturn = new AuthorizeRequestDto();
        pigeonReturn.setIdentityName(identityName);
        pigeonReturn.setIdentityUri(identityUri);
        pigeonReturn.setIconUri(iconUri);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("identityName", identityName);
      toMapResult.put("identityUri", identityUri);
      toMapResult.put("iconUri", iconUri);
      return toMapResult;
    }
    static @NonNull AuthorizeRequestDto fromMap(@NonNull Map<String, Object> map) {
      AuthorizeRequestDto pigeonResult = new AuthorizeRequestDto();
      Object identityName = map.get("identityName");
      pigeonResult.setIdentityName((String)identityName);
      Object identityUri = map.get("identityUri");
      pigeonResult.setIdentityUri((String)identityUri);
      Object iconUri = map.get("iconUri");
      pigeonResult.setIconUri((String)iconUri);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AuthorizeResultDto {
    private @NonNull byte[] publicKey;
    public @NonNull byte[] getPublicKey() { return publicKey; }
    public void setPublicKey(@NonNull byte[] setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"publicKey\" is null.");
      }
      this.publicKey = setterArg;
    }

    private @Nullable String accountLabel;
    public @Nullable String getAccountLabel() { return accountLabel; }
    public void setAccountLabel(@Nullable String setterArg) {
      this.accountLabel = setterArg;
    }

    private @Nullable String walletUriBase;
    public @Nullable String getWalletUriBase() { return walletUriBase; }
    public void setWalletUriBase(@Nullable String setterArg) {
      this.walletUriBase = setterArg;
    }

    private @Nullable byte[] scope;
    public @Nullable byte[] getScope() { return scope; }
    public void setScope(@Nullable byte[] setterArg) {
      this.scope = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private AuthorizeResultDto() {}
    public static final class Builder {
      private @Nullable byte[] publicKey;
      public @NonNull Builder setPublicKey(@NonNull byte[] setterArg) {
        this.publicKey = setterArg;
        return this;
      }
      private @Nullable String accountLabel;
      public @NonNull Builder setAccountLabel(@Nullable String setterArg) {
        this.accountLabel = setterArg;
        return this;
      }
      private @Nullable String walletUriBase;
      public @NonNull Builder setWalletUriBase(@Nullable String setterArg) {
        this.walletUriBase = setterArg;
        return this;
      }
      private @Nullable byte[] scope;
      public @NonNull Builder setScope(@Nullable byte[] setterArg) {
        this.scope = setterArg;
        return this;
      }
      public @NonNull AuthorizeResultDto build() {
        AuthorizeResultDto pigeonReturn = new AuthorizeResultDto();
        pigeonReturn.setPublicKey(publicKey);
        pigeonReturn.setAccountLabel(accountLabel);
        pigeonReturn.setWalletUriBase(walletUriBase);
        pigeonReturn.setScope(scope);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("publicKey", publicKey);
      toMapResult.put("accountLabel", accountLabel);
      toMapResult.put("walletUriBase", walletUriBase);
      toMapResult.put("scope", scope);
      return toMapResult;
    }
    static @NonNull AuthorizeResultDto fromMap(@NonNull Map<String, Object> map) {
      AuthorizeResultDto pigeonResult = new AuthorizeResultDto();
      Object publicKey = map.get("publicKey");
      pigeonResult.setPublicKey((byte[])publicKey);
      Object accountLabel = map.get("accountLabel");
      pigeonResult.setAccountLabel((String)accountLabel);
      Object walletUriBase = map.get("walletUriBase");
      pigeonResult.setWalletUriBase((String)walletUriBase);
      Object scope = map.get("scope");
      pigeonResult.setScope((byte[])scope);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ReauthorizeRequestDto {
    private @Nullable String identityName;
    public @Nullable String getIdentityName() { return identityName; }
    public void setIdentityName(@Nullable String setterArg) {
      this.identityName = setterArg;
    }

    private @Nullable String identityUri;
    public @Nullable String getIdentityUri() { return identityUri; }
    public void setIdentityUri(@Nullable String setterArg) {
      this.identityUri = setterArg;
    }

    private @Nullable String iconRelativeUri;
    public @Nullable String getIconRelativeUri() { return iconRelativeUri; }
    public void setIconRelativeUri(@Nullable String setterArg) {
      this.iconRelativeUri = setterArg;
    }

    private @NonNull String cluster;
    public @NonNull String getCluster() { return cluster; }
    public void setCluster(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"cluster\" is null.");
      }
      this.cluster = setterArg;
    }

    private @NonNull byte[] authorizationScope;
    public @NonNull byte[] getAuthorizationScope() { return authorizationScope; }
    public void setAuthorizationScope(@NonNull byte[] setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"authorizationScope\" is null.");
      }
      this.authorizationScope = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ReauthorizeRequestDto() {}
    public static final class Builder {
      private @Nullable String identityName;
      public @NonNull Builder setIdentityName(@Nullable String setterArg) {
        this.identityName = setterArg;
        return this;
      }
      private @Nullable String identityUri;
      public @NonNull Builder setIdentityUri(@Nullable String setterArg) {
        this.identityUri = setterArg;
        return this;
      }
      private @Nullable String iconRelativeUri;
      public @NonNull Builder setIconRelativeUri(@Nullable String setterArg) {
        this.iconRelativeUri = setterArg;
        return this;
      }
      private @Nullable String cluster;
      public @NonNull Builder setCluster(@NonNull String setterArg) {
        this.cluster = setterArg;
        return this;
      }
      private @Nullable byte[] authorizationScope;
      public @NonNull Builder setAuthorizationScope(@NonNull byte[] setterArg) {
        this.authorizationScope = setterArg;
        return this;
      }
      public @NonNull ReauthorizeRequestDto build() {
        ReauthorizeRequestDto pigeonReturn = new ReauthorizeRequestDto();
        pigeonReturn.setIdentityName(identityName);
        pigeonReturn.setIdentityUri(identityUri);
        pigeonReturn.setIconRelativeUri(iconRelativeUri);
        pigeonReturn.setCluster(cluster);
        pigeonReturn.setAuthorizationScope(authorizationScope);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("identityName", identityName);
      toMapResult.put("identityUri", identityUri);
      toMapResult.put("iconRelativeUri", iconRelativeUri);
      toMapResult.put("cluster", cluster);
      toMapResult.put("authorizationScope", authorizationScope);
      return toMapResult;
    }
    static @NonNull ReauthorizeRequestDto fromMap(@NonNull Map<String, Object> map) {
      ReauthorizeRequestDto pigeonResult = new ReauthorizeRequestDto();
      Object identityName = map.get("identityName");
      pigeonResult.setIdentityName((String)identityName);
      Object identityUri = map.get("identityUri");
      pigeonResult.setIdentityUri((String)identityUri);
      Object iconRelativeUri = map.get("iconRelativeUri");
      pigeonResult.setIconRelativeUri((String)iconRelativeUri);
      Object cluster = map.get("cluster");
      pigeonResult.setCluster((String)cluster);
      Object authorizationScope = map.get("authorizationScope");
      pigeonResult.setAuthorizationScope((byte[])authorizationScope);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SignedPayloadsResultDto {
    private @Nullable List<byte[]> payloads;
    public @Nullable List<byte[]> getPayloads() { return payloads; }
    public void setPayloads(@Nullable List<byte[]> setterArg) {
      this.payloads = setterArg;
    }

    private @Nullable MobileWalletAdapterServerException error;
    public @Nullable MobileWalletAdapterServerException getError() { return error; }
    public void setError(@Nullable MobileWalletAdapterServerException setterArg) {
      this.error = setterArg;
    }

    private @Nullable List<Boolean> validPayloads;
    public @Nullable List<Boolean> getValidPayloads() { return validPayloads; }
    public void setValidPayloads(@Nullable List<Boolean> setterArg) {
      this.validPayloads = setterArg;
    }

    public static final class Builder {
      private @Nullable List<byte[]> payloads;
      public @NonNull Builder setPayloads(@Nullable List<byte[]> setterArg) {
        this.payloads = setterArg;
        return this;
      }
      private @Nullable MobileWalletAdapterServerException error;
      public @NonNull Builder setError(@Nullable MobileWalletAdapterServerException setterArg) {
        this.error = setterArg;
        return this;
      }
      private @Nullable List<Boolean> validPayloads;
      public @NonNull Builder setValidPayloads(@Nullable List<Boolean> setterArg) {
        this.validPayloads = setterArg;
        return this;
      }
      public @NonNull SignedPayloadsResultDto build() {
        SignedPayloadsResultDto pigeonReturn = new SignedPayloadsResultDto();
        pigeonReturn.setPayloads(payloads);
        pigeonReturn.setError(error);
        pigeonReturn.setValidPayloads(validPayloads);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("payloads", payloads);
      toMapResult.put("error", error == null ? null : error.index);
      toMapResult.put("validPayloads", validPayloads);
      return toMapResult;
    }
    static @NonNull SignedPayloadsResultDto fromMap(@NonNull Map<String, Object> map) {
      SignedPayloadsResultDto pigeonResult = new SignedPayloadsResultDto();
      Object payloads = map.get("payloads");
      pigeonResult.setPayloads((List<byte[]>)payloads);
      Object error = map.get("error");
      pigeonResult.setError(error == null ? null : MobileWalletAdapterServerException.values()[(int)error]);
      Object validPayloads = map.get("validPayloads");
      pigeonResult.setValidPayloads((List<Boolean>)validPayloads);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SignTransactionsRequestDto {
    private @NonNull List<byte[]> payloads;
    public @NonNull List<byte[]> getPayloads() { return payloads; }
    public void setPayloads(@NonNull List<byte[]> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"payloads\" is null.");
      }
      this.payloads = setterArg;
    }

    private @Nullable String identityName;
    public @Nullable String getIdentityName() { return identityName; }
    public void setIdentityName(@Nullable String setterArg) {
      this.identityName = setterArg;
    }

    private @Nullable String identityUri;
    public @Nullable String getIdentityUri() { return identityUri; }
    public void setIdentityUri(@Nullable String setterArg) {
      this.identityUri = setterArg;
    }

    private @Nullable String iconRelativeUri;
    public @Nullable String getIconRelativeUri() { return iconRelativeUri; }
    public void setIconRelativeUri(@Nullable String setterArg) {
      this.iconRelativeUri = setterArg;
    }

    private @NonNull String cluster;
    public @NonNull String getCluster() { return cluster; }
    public void setCluster(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"cluster\" is null.");
      }
      this.cluster = setterArg;
    }

    private @NonNull byte[] authorizationScope;
    public @NonNull byte[] getAuthorizationScope() { return authorizationScope; }
    public void setAuthorizationScope(@NonNull byte[] setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"authorizationScope\" is null.");
      }
      this.authorizationScope = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SignTransactionsRequestDto() {}
    public static final class Builder {
      private @Nullable List<byte[]> payloads;
      public @NonNull Builder setPayloads(@NonNull List<byte[]> setterArg) {
        this.payloads = setterArg;
        return this;
      }
      private @Nullable String identityName;
      public @NonNull Builder setIdentityName(@Nullable String setterArg) {
        this.identityName = setterArg;
        return this;
      }
      private @Nullable String identityUri;
      public @NonNull Builder setIdentityUri(@Nullable String setterArg) {
        this.identityUri = setterArg;
        return this;
      }
      private @Nullable String iconRelativeUri;
      public @NonNull Builder setIconRelativeUri(@Nullable String setterArg) {
        this.iconRelativeUri = setterArg;
        return this;
      }
      private @Nullable String cluster;
      public @NonNull Builder setCluster(@NonNull String setterArg) {
        this.cluster = setterArg;
        return this;
      }
      private @Nullable byte[] authorizationScope;
      public @NonNull Builder setAuthorizationScope(@NonNull byte[] setterArg) {
        this.authorizationScope = setterArg;
        return this;
      }
      public @NonNull SignTransactionsRequestDto build() {
        SignTransactionsRequestDto pigeonReturn = new SignTransactionsRequestDto();
        pigeonReturn.setPayloads(payloads);
        pigeonReturn.setIdentityName(identityName);
        pigeonReturn.setIdentityUri(identityUri);
        pigeonReturn.setIconRelativeUri(iconRelativeUri);
        pigeonReturn.setCluster(cluster);
        pigeonReturn.setAuthorizationScope(authorizationScope);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("payloads", payloads);
      toMapResult.put("identityName", identityName);
      toMapResult.put("identityUri", identityUri);
      toMapResult.put("iconRelativeUri", iconRelativeUri);
      toMapResult.put("cluster", cluster);
      toMapResult.put("authorizationScope", authorizationScope);
      return toMapResult;
    }
    static @NonNull SignTransactionsRequestDto fromMap(@NonNull Map<String, Object> map) {
      SignTransactionsRequestDto pigeonResult = new SignTransactionsRequestDto();
      Object payloads = map.get("payloads");
      pigeonResult.setPayloads((List<byte[]>)payloads);
      Object identityName = map.get("identityName");
      pigeonResult.setIdentityName((String)identityName);
      Object identityUri = map.get("identityUri");
      pigeonResult.setIdentityUri((String)identityUri);
      Object iconRelativeUri = map.get("iconRelativeUri");
      pigeonResult.setIconRelativeUri((String)iconRelativeUri);
      Object cluster = map.get("cluster");
      pigeonResult.setCluster((String)cluster);
      Object authorizationScope = map.get("authorizationScope");
      pigeonResult.setAuthorizationScope((byte[])authorizationScope);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SignMessagesRequestDto {
    private @NonNull List<byte[]> payloads;
    public @NonNull List<byte[]> getPayloads() { return payloads; }
    public void setPayloads(@NonNull List<byte[]> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"payloads\" is null.");
      }
      this.payloads = setterArg;
    }

    private @Nullable String identityName;
    public @Nullable String getIdentityName() { return identityName; }
    public void setIdentityName(@Nullable String setterArg) {
      this.identityName = setterArg;
    }

    private @Nullable String identityUri;
    public @Nullable String getIdentityUri() { return identityUri; }
    public void setIdentityUri(@Nullable String setterArg) {
      this.identityUri = setterArg;
    }

    private @Nullable String iconRelativeUri;
    public @Nullable String getIconRelativeUri() { return iconRelativeUri; }
    public void setIconRelativeUri(@Nullable String setterArg) {
      this.iconRelativeUri = setterArg;
    }

    private @NonNull String cluster;
    public @NonNull String getCluster() { return cluster; }
    public void setCluster(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"cluster\" is null.");
      }
      this.cluster = setterArg;
    }

    private @NonNull byte[] authorizationScope;
    public @NonNull byte[] getAuthorizationScope() { return authorizationScope; }
    public void setAuthorizationScope(@NonNull byte[] setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"authorizationScope\" is null.");
      }
      this.authorizationScope = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SignMessagesRequestDto() {}
    public static final class Builder {
      private @Nullable List<byte[]> payloads;
      public @NonNull Builder setPayloads(@NonNull List<byte[]> setterArg) {
        this.payloads = setterArg;
        return this;
      }
      private @Nullable String identityName;
      public @NonNull Builder setIdentityName(@Nullable String setterArg) {
        this.identityName = setterArg;
        return this;
      }
      private @Nullable String identityUri;
      public @NonNull Builder setIdentityUri(@Nullable String setterArg) {
        this.identityUri = setterArg;
        return this;
      }
      private @Nullable String iconRelativeUri;
      public @NonNull Builder setIconRelativeUri(@Nullable String setterArg) {
        this.iconRelativeUri = setterArg;
        return this;
      }
      private @Nullable String cluster;
      public @NonNull Builder setCluster(@NonNull String setterArg) {
        this.cluster = setterArg;
        return this;
      }
      private @Nullable byte[] authorizationScope;
      public @NonNull Builder setAuthorizationScope(@NonNull byte[] setterArg) {
        this.authorizationScope = setterArg;
        return this;
      }
      public @NonNull SignMessagesRequestDto build() {
        SignMessagesRequestDto pigeonReturn = new SignMessagesRequestDto();
        pigeonReturn.setPayloads(payloads);
        pigeonReturn.setIdentityName(identityName);
        pigeonReturn.setIdentityUri(identityUri);
        pigeonReturn.setIconRelativeUri(iconRelativeUri);
        pigeonReturn.setCluster(cluster);
        pigeonReturn.setAuthorizationScope(authorizationScope);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("payloads", payloads);
      toMapResult.put("identityName", identityName);
      toMapResult.put("identityUri", identityUri);
      toMapResult.put("iconRelativeUri", iconRelativeUri);
      toMapResult.put("cluster", cluster);
      toMapResult.put("authorizationScope", authorizationScope);
      return toMapResult;
    }
    static @NonNull SignMessagesRequestDto fromMap(@NonNull Map<String, Object> map) {
      SignMessagesRequestDto pigeonResult = new SignMessagesRequestDto();
      Object payloads = map.get("payloads");
      pigeonResult.setPayloads((List<byte[]>)payloads);
      Object identityName = map.get("identityName");
      pigeonResult.setIdentityName((String)identityName);
      Object identityUri = map.get("identityUri");
      pigeonResult.setIdentityUri((String)identityUri);
      Object iconRelativeUri = map.get("iconRelativeUri");
      pigeonResult.setIconRelativeUri((String)iconRelativeUri);
      Object cluster = map.get("cluster");
      pigeonResult.setCluster((String)cluster);
      Object authorizationScope = map.get("authorizationScope");
      pigeonResult.setAuthorizationScope((byte[])authorizationScope);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SignAndSendTransactionsRequestDto {
    private @Nullable Long minContextSlot;
    public @Nullable Long getMinContextSlot() { return minContextSlot; }
    public void setMinContextSlot(@Nullable Long setterArg) {
      this.minContextSlot = setterArg;
    }

    private @NonNull List<byte[]> transactions;
    public @NonNull List<byte[]> getTransactions() { return transactions; }
    public void setTransactions(@NonNull List<byte[]> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"transactions\" is null.");
      }
      this.transactions = setterArg;
    }

    private @NonNull byte[] publicKey;
    public @NonNull byte[] getPublicKey() { return publicKey; }
    public void setPublicKey(@NonNull byte[] setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"publicKey\" is null.");
      }
      this.publicKey = setterArg;
    }

    private @Nullable String identityName;
    public @Nullable String getIdentityName() { return identityName; }
    public void setIdentityName(@Nullable String setterArg) {
      this.identityName = setterArg;
    }

    private @Nullable String identityUri;
    public @Nullable String getIdentityUri() { return identityUri; }
    public void setIdentityUri(@Nullable String setterArg) {
      this.identityUri = setterArg;
    }

    private @Nullable String iconRelativeUri;
    public @Nullable String getIconRelativeUri() { return iconRelativeUri; }
    public void setIconRelativeUri(@Nullable String setterArg) {
      this.iconRelativeUri = setterArg;
    }

    private @NonNull String cluster;
    public @NonNull String getCluster() { return cluster; }
    public void setCluster(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"cluster\" is null.");
      }
      this.cluster = setterArg;
    }

    private @NonNull byte[] authorizationScope;
    public @NonNull byte[] getAuthorizationScope() { return authorizationScope; }
    public void setAuthorizationScope(@NonNull byte[] setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"authorizationScope\" is null.");
      }
      this.authorizationScope = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SignAndSendTransactionsRequestDto() {}
    public static final class Builder {
      private @Nullable Long minContextSlot;
      public @NonNull Builder setMinContextSlot(@Nullable Long setterArg) {
        this.minContextSlot = setterArg;
        return this;
      }
      private @Nullable List<byte[]> transactions;
      public @NonNull Builder setTransactions(@NonNull List<byte[]> setterArg) {
        this.transactions = setterArg;
        return this;
      }
      private @Nullable byte[] publicKey;
      public @NonNull Builder setPublicKey(@NonNull byte[] setterArg) {
        this.publicKey = setterArg;
        return this;
      }
      private @Nullable String identityName;
      public @NonNull Builder setIdentityName(@Nullable String setterArg) {
        this.identityName = setterArg;
        return this;
      }
      private @Nullable String identityUri;
      public @NonNull Builder setIdentityUri(@Nullable String setterArg) {
        this.identityUri = setterArg;
        return this;
      }
      private @Nullable String iconRelativeUri;
      public @NonNull Builder setIconRelativeUri(@Nullable String setterArg) {
        this.iconRelativeUri = setterArg;
        return this;
      }
      private @Nullable String cluster;
      public @NonNull Builder setCluster(@NonNull String setterArg) {
        this.cluster = setterArg;
        return this;
      }
      private @Nullable byte[] authorizationScope;
      public @NonNull Builder setAuthorizationScope(@NonNull byte[] setterArg) {
        this.authorizationScope = setterArg;
        return this;
      }
      public @NonNull SignAndSendTransactionsRequestDto build() {
        SignAndSendTransactionsRequestDto pigeonReturn = new SignAndSendTransactionsRequestDto();
        pigeonReturn.setMinContextSlot(minContextSlot);
        pigeonReturn.setTransactions(transactions);
        pigeonReturn.setPublicKey(publicKey);
        pigeonReturn.setIdentityName(identityName);
        pigeonReturn.setIdentityUri(identityUri);
        pigeonReturn.setIconRelativeUri(iconRelativeUri);
        pigeonReturn.setCluster(cluster);
        pigeonReturn.setAuthorizationScope(authorizationScope);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("minContextSlot", minContextSlot);
      toMapResult.put("transactions", transactions);
      toMapResult.put("publicKey", publicKey);
      toMapResult.put("identityName", identityName);
      toMapResult.put("identityUri", identityUri);
      toMapResult.put("iconRelativeUri", iconRelativeUri);
      toMapResult.put("cluster", cluster);
      toMapResult.put("authorizationScope", authorizationScope);
      return toMapResult;
    }
    static @NonNull SignAndSendTransactionsRequestDto fromMap(@NonNull Map<String, Object> map) {
      SignAndSendTransactionsRequestDto pigeonResult = new SignAndSendTransactionsRequestDto();
      Object minContextSlot = map.get("minContextSlot");
      pigeonResult.setMinContextSlot((minContextSlot == null) ? null : ((minContextSlot instanceof Integer) ? (Integer)minContextSlot : (Long)minContextSlot));
      Object transactions = map.get("transactions");
      pigeonResult.setTransactions((List<byte[]>)transactions);
      Object publicKey = map.get("publicKey");
      pigeonResult.setPublicKey((byte[])publicKey);
      Object identityName = map.get("identityName");
      pigeonResult.setIdentityName((String)identityName);
      Object identityUri = map.get("identityUri");
      pigeonResult.setIdentityUri((String)identityUri);
      Object iconRelativeUri = map.get("iconRelativeUri");
      pigeonResult.setIconRelativeUri((String)iconRelativeUri);
      Object cluster = map.get("cluster");
      pigeonResult.setCluster((String)cluster);
      Object authorizationScope = map.get("authorizationScope");
      pigeonResult.setAuthorizationScope((byte[])authorizationScope);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SignaturesResultDto {
    private @Nullable List<byte[]> signatures;
    public @Nullable List<byte[]> getSignatures() { return signatures; }
    public void setSignatures(@Nullable List<byte[]> setterArg) {
      this.signatures = setterArg;
    }

    private @Nullable MobileWalletAdapterServerException error;
    public @Nullable MobileWalletAdapterServerException getError() { return error; }
    public void setError(@Nullable MobileWalletAdapterServerException setterArg) {
      this.error = setterArg;
    }

    private @Nullable List<Boolean> validSignatures;
    public @Nullable List<Boolean> getValidSignatures() { return validSignatures; }
    public void setValidSignatures(@Nullable List<Boolean> setterArg) {
      this.validSignatures = setterArg;
    }

    public static final class Builder {
      private @Nullable List<byte[]> signatures;
      public @NonNull Builder setSignatures(@Nullable List<byte[]> setterArg) {
        this.signatures = setterArg;
        return this;
      }
      private @Nullable MobileWalletAdapterServerException error;
      public @NonNull Builder setError(@Nullable MobileWalletAdapterServerException setterArg) {
        this.error = setterArg;
        return this;
      }
      private @Nullable List<Boolean> validSignatures;
      public @NonNull Builder setValidSignatures(@Nullable List<Boolean> setterArg) {
        this.validSignatures = setterArg;
        return this;
      }
      public @NonNull SignaturesResultDto build() {
        SignaturesResultDto pigeonReturn = new SignaturesResultDto();
        pigeonReturn.setSignatures(signatures);
        pigeonReturn.setError(error);
        pigeonReturn.setValidSignatures(validSignatures);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("signatures", signatures);
      toMapResult.put("error", error == null ? null : error.index);
      toMapResult.put("validSignatures", validSignatures);
      return toMapResult;
    }
    static @NonNull SignaturesResultDto fromMap(@NonNull Map<String, Object> map) {
      SignaturesResultDto pigeonResult = new SignaturesResultDto();
      Object signatures = map.get("signatures");
      pigeonResult.setSignatures((List<byte[]>)signatures);
      Object error = map.get("error");
      pigeonResult.setError(error == null ? null : MobileWalletAdapterServerException.values()[(int)error]);
      Object validSignatures = map.get("validSignatures");
      pigeonResult.setValidSignatures((List<Boolean>)validSignatures);
      return pigeonResult;
    }
  }
  private static class ApiFlutterCodec extends StandardMessageCodec {
    public static final ApiFlutterCodec INSTANCE = new ApiFlutterCodec();
    private ApiFlutterCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AuthorizeRequestDto.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return AuthorizeResultDto.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return ReauthorizeRequestDto.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return SignAndSendTransactionsRequestDto.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return SignMessagesRequestDto.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return SignTransactionsRequestDto.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return SignaturesResultDto.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return SignedPayloadsResultDto.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AuthorizeRequestDto) {
        stream.write(128);
        writeValue(stream, ((AuthorizeRequestDto) value).toMap());
      } else 
      if (value instanceof AuthorizeResultDto) {
        stream.write(129);
        writeValue(stream, ((AuthorizeResultDto) value).toMap());
      } else 
      if (value instanceof ReauthorizeRequestDto) {
        stream.write(130);
        writeValue(stream, ((ReauthorizeRequestDto) value).toMap());
      } else 
      if (value instanceof SignAndSendTransactionsRequestDto) {
        stream.write(131);
        writeValue(stream, ((SignAndSendTransactionsRequestDto) value).toMap());
      } else 
      if (value instanceof SignMessagesRequestDto) {
        stream.write(132);
        writeValue(stream, ((SignMessagesRequestDto) value).toMap());
      } else 
      if (value instanceof SignTransactionsRequestDto) {
        stream.write(133);
        writeValue(stream, ((SignTransactionsRequestDto) value).toMap());
      } else 
      if (value instanceof SignaturesResultDto) {
        stream.write(134);
        writeValue(stream, ((SignaturesResultDto) value).toMap());
      } else 
      if (value instanceof SignedPayloadsResultDto) {
        stream.write(135);
        writeValue(stream, ((SignedPayloadsResultDto) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class ApiFlutter {
    private final BinaryMessenger binaryMessenger;
    public ApiFlutter(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return ApiFlutterCodec.INSTANCE;
    }

    public void onScenarioReady(@NonNull Long idArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiFlutter.onScenarioReady", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(idArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onScenarioServingClients(@NonNull Long idArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiFlutter.onScenarioServingClients", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(idArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onScenarioServingComplete(@NonNull Long idArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiFlutter.onScenarioServingComplete", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(idArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onScenarioComplete(@NonNull Long idArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiFlutter.onScenarioComplete", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(idArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onScenarioError(@NonNull Long idArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiFlutter.onScenarioError", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(idArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onScenarioTeardownComplete(@NonNull Long idArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiFlutter.onScenarioTeardownComplete", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(idArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void authorize(@NonNull AuthorizeRequestDto requestArg, @NonNull Long idArg, Reply<AuthorizeResultDto> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiFlutter.authorize", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(requestArg, idArg)), channelReply -> {
        @SuppressWarnings("ConstantConditions")
        AuthorizeResultDto output = (AuthorizeResultDto)channelReply;
        callback.reply(output);
      });
    }
    public void reauthorize(@NonNull ReauthorizeRequestDto requestArg, @NonNull Long idArg, Reply<Boolean> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiFlutter.reauthorize", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(requestArg, idArg)), channelReply -> {
        @SuppressWarnings("ConstantConditions")
        Boolean output = (Boolean)channelReply;
        callback.reply(output);
      });
    }
    public void signTransactions(@NonNull SignTransactionsRequestDto requestArg, @NonNull Long idArg, Reply<SignedPayloadsResultDto> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiFlutter.signTransactions", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(requestArg, idArg)), channelReply -> {
        @SuppressWarnings("ConstantConditions")
        SignedPayloadsResultDto output = (SignedPayloadsResultDto)channelReply;
        callback.reply(output);
      });
    }
    public void signMessages(@NonNull SignMessagesRequestDto requestArg, @NonNull Long idArg, Reply<SignedPayloadsResultDto> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiFlutter.signMessages", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(requestArg, idArg)), channelReply -> {
        @SuppressWarnings("ConstantConditions")
        SignedPayloadsResultDto output = (SignedPayloadsResultDto)channelReply;
        callback.reply(output);
      });
    }
    public void signAndSendTransactions(@NonNull SignAndSendTransactionsRequestDto requestArg, @NonNull Long idArg, Reply<SignaturesResultDto> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiFlutter.signAndSendTransactions", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(requestArg, idArg)), channelReply -> {
        @SuppressWarnings("ConstantConditions")
        SignaturesResultDto output = (SignaturesResultDto)channelReply;
        callback.reply(output);
      });
    }
  }
  private static class ApiHostCodec extends StandardMessageCodec {
    public static final ApiHostCodec INSTANCE = new ApiHostCodec();
    private ApiHostCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ApiHost {
    void start(@NonNull Long id);
    void close(@NonNull Long id);

    /** The codec used by ApiHost. */
    static MessageCodec<Object> getCodec() {
      return ApiHostCodec.INSTANCE;
    }

    /** Sets up an instance of `ApiHost` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ApiHost api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiHost.start", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number idArg = (Number)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              api.start((idArg == null) ? null : idArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiHost.close", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number idArg = (Number)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              api.close((idArg == null) ? null : idArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
